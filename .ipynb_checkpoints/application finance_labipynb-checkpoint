{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "01d47380-d416-4b9e-ac64-ba7a6298fbea",
   "metadata": {},
   "source": [
    " \n",
    "\n",
    "```python\n",
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import plotly.graph_objects as go\n",
    "import plotly.express as px\n",
    "from plotly.subplots import make_subplots\n",
    "import yfinance as yf\n",
    "import requests\n",
    "from datetime import datetime, timedelta\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "import pickle\n",
    "from io import BytesIO\n",
    "\n",
    "# Configuration de la page\n",
    "st.set_page_config(\n",
    "    page_title=\"FinanceLab - Analyse Financière\",\n",
    "    page_icon=\"📊\",\n",
    "    layout=\"wide\",\n",
    "    initial_sidebar_state=\"expanded\"\n",
    ")\n",
    "\n",
    "# CSS personnalisé\n",
    "st.markdown(\"\"\"\n",
    "<style>\n",
    "    .main-header {\n",
    "        font-size: 2.5rem;\n",
    "        color: #1f77b4;\n",
    "        text-align: center;\n",
    "        margin-bottom: 2rem;\n",
    "    }\n",
    "    .concept-box {\n",
    "        background-color: #f0f2f6;\n",
    "        padding: 1rem;\n",
    "        border-radius: 10px;\n",
    "        margin: 1rem 0;\n",
    "    }\n",
    "    .metric-card {\n",
    "        background-color: white;\n",
    "        padding: 1rem;\n",
    "        border-radius: 10px;\n",
    "        border-left: 4px solid #1f77b4;\n",
    "        box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n",
    "    }\n",
    "</style>\n",
    "\"\"\", unsafe_allow_html=True)\n",
    "\n",
    "# Initialisation de l'état de session\n",
    "if 'progression' not in st.session_state:\n",
    "    st.session_state.progression = {\n",
    "        'fondamentaux': False,\n",
    "        'ratios': False,\n",
    "        'equilibre': False,\n",
    "        'evaluation': False,\n",
    "        'cas_pratiques': False,\n",
    "        'quiz': False\n",
    "    }\n",
    "\n",
    "if 'analyses_sauvegardees' not in st.session_state:\n",
    "    st.session_state.analyses_sauvegardees = []\n",
    "\n",
    "if 'watchlist' not in st.session_state:\n",
    "    st.session_state.watchlist = []\n",
    "\n",
    "if 'notifications' not in st.session_state:\n",
    "    st.session_state.notifications = [\n",
    "        {\"type\": \"info\", \"message\": \"📚 Module Fondamentaux à compléter\", \"date\": \"2024-01-15\"},\n",
    "        {\"type\": \"warning\", \"message\": \"⚡ Quiz Ratios à réviser\", \"date\": \"2024-01-14\"},\n",
    "        {\"type\": \"success\", \"message\": \"🎉 Bienvenue dans FinanceLab !\", \"date\": \"2024-01-13\"}\n",
    "    ]\n",
    "\n",
    "# Titre principal\n",
    "st.markdown('<h1 class=\"main-header\">🎯 FinanceLab - Maîtrisez l\\'Analyse Financière</h1>', unsafe_allow_html=True)\n",
    "\n",
    "# Sidebar pour la navigation\n",
    "st.sidebar.title(\"📚 Modules d'Apprentissage\")\n",
    "section = st.sidebar.radio(\n",
    "    \"Choisissez un module:\",\n",
    "    [\"🏠 Accueil\", \"📋 Fondamentaux\", \"💰 Performance\", \"⚖️ Équilibre Financier\", \"📊 Analyse par Ratios\", \n",
    "     \"🎯 Évaluation d'Entreprise\", \"🏢 Cas Pratiques\", \"🤖 Prévisions IA\", \"🌍 Données Réelles\", \n",
    "     \"💾 Mes Analyses\", \"📊 Mon Dashboard\", \"🔔 Alertes & Veille\", \"📑 Reporting\", \"❓ Aide & Support\"]\n",
    ")\n",
    "\n",
    "# Fonction pour afficher les notifications\n",
    "def afficher_notifications():\n",
    "    if st.session_state.notifications:\n",
    "        st.sidebar.markdown(\"---\")\n",
    "        st.sidebar.subheader(\"🔔 Notifications\")\n",
    "        \n",
    "        for notif in st.session_state.notifications[:3]:\n",
    "            if notif[\"type\"] == \"info\":\n",
    "                st.sidebar.info(notif[\"message\"])\n",
    "            elif notif[\"type\"] == \"warning\":\n",
    "                st.sidebar.warning(notif[\"message\"])\n",
    "            elif notif[\"type\"] == \"success\":\n",
    "                st.sidebar.success(notif[\"message\"])\n",
    "\n",
    "# Appel de la fonction notifications\n",
    "afficher_notifications()\n",
    "\n",
    "# Section Accueil\n",
    "if section == \"🏠 Accueil\":\n",
    "    st.header(\"🏠 Bienvenue dans FinanceLab !\")\n",
    "    \n",
    "    col1, col2 = st.columns([2, 1])\n",
    "    \n",
    "    with col1:\n",
    "        st.markdown(\"\"\"\n",
    "        ## 🎯 Votre Laboratoire d'Analyse Financière\n",
    "        \n",
    "        **FinanceLab** est une plateforme complète d'apprentissage interactif de l'analyse financière.\n",
    "        Que vous soyez étudiant, professionnel ou entrepreneur, maîtrisez les concepts clés grâce à des outils pratiques et des cas concrets.\n",
    "        \n",
    "        ### 📚 Ce que vous allez apprendre:\n",
    "        \n",
    "        ✅ **Les fondamentaux** de l'information financière  \n",
    "        ✅ **L'analyse des ratios** et indicateurs de performance  \n",
    "        ✅ **L'équilibre financier** (FR, BFR, Trésorerie)  \n",
    "        ✅ **Les méthodes d'évaluation** d'entreprise  \n",
    "        ✅ **La prévision** avec l'intelligence artificielle  \n",
    "        ✅ **L'analyse de données réelles** du marché  \n",
    "        \n",
    "        ### 🚀 Comment progresser:\n",
    "        \n",
    "        1. **Commencez** par les fondamentaux\n",
    "        2. **Pratiquez** avec les calculateurs interactifs\n",
    "        3. **Testez** vos connaissances avec les quiz\n",
    "        4. **Appliquez** sur des cas concrets\n",
    "        5. **Validez** votre progression avec le dashboard\n",
    "        \"\"\")\n",
    "    \n",
    "    with col2:\n",
    "        st.image(\"https://via.placeholder.com/300x400/1f77b4/ffffff?text=FinanceLab\", use_column_width=True)\n",
    "        \n",
    "        # Quick start\n",
    "        st.markdown(\"### 🚀 Démarrage Rapide\")\n",
    "        if st.button(\"📊 Commencer par les fondamentaux\"):\n",
    "            st.session_state.progression['fondamentaux'] = True\n",
    "            st.rerun()\n",
    "        \n",
    "        if st.button(\"💰 Analyser la performance\"):\n",
    "            st.session_state.progression['ratios'] = True\n",
    "            st.rerun()\n",
    "\n",
    "    # Statistiques globales\n",
    "    st.markdown(\"---\")\n",
    "    st.subheader(\"📈 Votre Progression Globale\")\n",
    "    \n",
    "    modules_completes = sum(st.session_state.progression.values())\n",
    "    progression_totale = (modules_completes / len(st.session_state.progression)) * 100\n",
    "    \n",
    "    col_met1, col_met2, col_met3, col_met4 = st.columns(4)\n",
    "    \n",
    "    with col_met1:\n",
    "        st.metric(\"Modules Complétés\", f\"{modules_completes}/6\")\n",
    "    with col_met2:\n",
    "        st.metric(\"Progression Globale\", f\"{progression_totale:.0f}%\")\n",
    "    with col_met3:\n",
    "        st.metric(\"Analyses Sauvegardées\", len(st.session_state.analyses_sauvegardees))\n",
    "    with col_met4:\n",
    "        st.metric(\"Entreprises Surveillées\", len(st.session_state.watchlist))\n",
    "\n",
    "# Section Fondamentaux\n",
    "elif section == \"📋 Fondamentaux\":\n",
    "    st.header(\"📋 Les Fondamentaux de l'Information Financière\")\n",
    "    \n",
    "    # Marquer comme complété\n",
    "    if not st.session_state.progression['fondamentaux']:\n",
    "        if st.button(\"✅ Marquer ce module comme complété\"):\n",
    "            st.session_state.progression['fondamentaux'] = True\n",
    "            st.session_state.notifications.append({\n",
    "                \"type\": \"success\", \n",
    "                \"message\": \"🎉 Module Fondamentaux complété !\", \n",
    "                \"date\": datetime.now().strftime(\"%Y-%m-%d\")\n",
    "            })\n",
    "            st.rerun()\n",
    "    \n",
    "    tab1, tab2, tab3, tab4 = st.tabs([\"📊 Principes Comptables\", \"🏦 Le Bilan\", \"📈 Compte de Résultat\", \"🧮 Soldes Intermédiaires\"])\n",
    "    \n",
    "    with tab1:\n",
    "        st.subheader(\"Les 10 Principes Comptables Fondamentaux\")\n",
    "        \n",
    "        principles = {\n",
    "            \"Principe de prudence\": \"Anticiper les pertes, ne pas anticiper les gains. Se préparer aux difficultés sans compter sur les opportunités incertaines.\",\n",
    "            \"Continuité d'exploitation\": \"L'entreprise continue son activité normalement. Les états financiers sont préparés dans cette perspective.\",\n",
    "            \"Coût historique\": \"Évaluation des actifs à leur prix d'acquisition. Même si la valeur de marché a augmenté.\",\n",
    "            \"Indépendance des exercices\": \"Rattacher charges et produits à la bonne période. Chaque exercice doit refléter sa propre performance.\",\n",
    "            \"Permanence des méthodes\": \"Application constante des règles dans le temps. Permet la comparabilité des états financiers.\",\n",
    "            \"Non-compensation\": \"Ne pas compenser actif/passif ou charges/produits. Chaque élément doit apparaître distinctement.\",\n",
    "            \"Image fidèle\": \"Les comptes doivent refléter la réalité économique de l'entreprise, au-delà de la simple légalité.\",\n",
    "            \"Primauté de la réalité économique\": \"La substance prime sur la forme. L'analyse économique prévaut sur l'apparence juridique.\",\n",
    "            \"Spécialisation des exercices\": \"Chaque exercice a sa propre détermination du résultat. Pas de report de bénéfices ou pertes.\",\n",
    "            \"Juste valeur\": \"Évaluation à la valeur de marché quand elle est disponible et fiable.\"\n",
    "        }\n",
    "        \n",
    "        col1, col2 = st.columns(2)\n",
    "        with col1:\n",
    "            for principle, description in list(principles.items())[:5]:\n",
    "                with st.expander(f\"✅ {principle}\"):\n",
    "                    st.write(description)\n",
    "        \n",
    "        with col2:\n",
    "            for principle, description in list(principles.items())[5:]:\n",
    "                with st.expander(f\"✅ {principle}\"):\n",
    "                    st.write(description)\n",
    "    \n",
    "    with tab2:\n",
    "        st.subheader(\"🔄 Reclassement du Bilan Interactif\")\n",
    "        \n",
    "        col1, col2 = st.columns(2)\n",
    "        \n",
    "        with col1:\n",
    "            st.markdown(\"#### Bilan Comptable (Saisie)\")\n",
    "            \n",
    "            # Actif\n",
    "            st.markdown(\"**ACTIF**\")\n",
    "            immob_incorporelles = st.number_input(\"Immobilisations incorporelles\", value=150000)\n",
    "            immob_corporelles = st.number_input(\"Immobilisations corporelles\", value=450000)\n",
    "            immob_financieres = st.number_input(\"Immobilisations financières\", value=200000)\n",
    "            stocks = st.number_input(\"Stocks\", value=120000)\n",
    "            clients = st.number_input(\"Clients et comptes rattachés\", value=180000)\n",
    "            disponibilites = st.number_input(\"Disponibilités\", value=50000)\n",
    "            \n",
    "            # Passif\n",
    "            st.markdown(\"**PASSIF**\")\n",
    "            capital = st.number_input(\"Capital social\", value=300000)\n",
    "            reserves = st.number_input(\"Réserves\", value=200000)\n",
    "            resultat = st.number_input(\"Résultat de l'exercice\", value=50000)\n",
    "            emprunts_longs = st.number_input(\"Emprunts à long terme\", value=250000)\n",
    "            fournisseurs = st.number_input(\"Fournisseurs\", value=150000)\n",
    "            dettes_fiscales = st.number_input(\"Dettes fiscales et sociales\", value=100000)\n",
    "        \n",
    "        with col2:\n",
    "            st.markdown(\"#### Bilan Financier Reclassé\")\n",
    "            \n",
    "            # Calculs pour le bilan financier\n",
    "            actif_immobilise = immob_incorporelles + immob_corporelles + immob_financieres\n",
    "            actif_circulant = stocks + clients\n",
    "            tresorerie_actif = disponibilites\n",
    "            \n",
    "            capitaux_propres = capital + reserves + resultat\n",
    "            dettes_financieres = emprunts_longs\n",
    "            passif_circulant = fournisseurs + dettes_fiscales\n",
    "            \n",
    "            # Affichage du bilan financier\n",
    "            st.markdown(\"**ACTIF**\")\n",
    "            st.write(f\"Actif immobilisé: {actif_immobilise:,.0f} €\")\n",
    "            st.write(f\"Actif circulant: {actif_circulant:,.0f} €\")\n",
    "            st.write(f\"Trésorerie active: {tresorerie_actif:,.0f} €\")\n",
    "            st.write(f\"**Total Actif: {actif_immobilise + actif_circulant + tresorerie_actif:,.0f} €**\")\n",
    "            \n",
    "            st.markdown(\"**PASSIF**\")\n",
    "            st.write(f\"Capitaux propres: {capitaux_propres:,.0f} €\")\n",
    "            st.write(f\"Dettes financières: {dettes_financieres:,.0f} €\")\n",
    "            st.write(f\"Passif circulant: {passif_circulant:,.0f} €\")\n",
    "            st.write(f\"**Total Passif: {capitaux_propres + dettes_financieres + passif_circulant:,.0f} €**\")\n",
    "            \n",
    "            # Vérification de l'équilibre\n",
    "            total_actif = actif_immobilise + actif_circulant + tresorerie_actif\n",
    "            total_passif = capitaux_propres + dettes_financieres + passif_circulant\n",
    "            \n",
    "            if abs(total_actif - total_passif) < 1:\n",
    "                st.success(\"✅ Le bilan est équilibré !\")\n",
    "            else:\n",
    "                st.error(\"❌ Le bilan n'est pas équilibré !\")\n",
    "            \n",
    "            # Explication pédagogique\n",
    "            with st.expander(\"💡 Comprendre le reclassement\"):\n",
    "                st.markdown(\"\"\"\n",
    "                **Pourquoi reclasser le bilan ?**\n",
    "                \n",
    "                Le bilan comptable suit des règles précises, mais le bilan financier offre une vision plus opérationnelle:\n",
    "                \n",
    "                - **Actif immobilisé**: Investissements durables\n",
    "                - **Actif circulant**: Cycle d'exploitation (stocks, créances)\n",
    "                - **Trésorerie active**: Liquidités disponibles\n",
    "                \n",
    "                Cette vision facilite l'analyse de l'équilibre financier.\n",
    "                \"\"\")\n",
    "\n",
    "    with tab3:\n",
    "        st.subheader(\"📈 Structure du Compte de Résultat\")\n",
    "        \n",
    "        col1, col2 = st.columns(2)\n",
    "        \n",
    "        with col1:\n",
    "            st.markdown(\"#### Produits\")\n",
    "            ca = st.number_input(\"Chiffre d'affaires\", value=1000000)\n",
    "            prod_stockee = st.number_input(\"Production stockée\", value=50000)\n",
    "            subv_exploitation = st.number_input(\"Subventions d'exploitation\", value=20000)\n",
    "            produits_financiers = st.number_input(\"Produits financiers\", value=30000)\n",
    "            produits_exceptionnels = st.number_input(\"Produits exceptionnels\", value=15000)\n",
    "        \n",
    "        with col2:\n",
    "            st.markdown(\"#### Charges\")\n",
    "            achats_consommes = st.number_input(\"Achats consommés\", value=600000)\n",
    "            services_externes = st.number_input(\"Services externes\", value=120000)\n",
    "            charges_personnel = st.number_input(\"Charges de personnel\", value=180000)\n",
    "            dotations_amortissement = st.number_input(\"Dotations aux amortissements\", value=80000)\n",
    "            charges_financieres = st.number_input(\"Charges financières\", value=25000)\n",
    "            charges_exceptionnelles = st.number_input(\"Charges exceptionnelles\", value=10000)\n",
    "            impot_benefices = st.number_input(\"Impôt sur les bénéfices\", value=35000)\n",
    "        \n",
    "        # Calcul des résultats intermédiaires\n",
    "        marge_commerciale = ca - achats_consommes\n",
    "        valeur_ajoutee = marge_commerciale - services_externes\n",
    "        ebe = valeur_ajoutee - charges_personnel\n",
    "        resultat_exploitation = ebe - dotations_amortissement\n",
    "        resultat_courant = resultat_exploitation + produits_financiers - charges_financieres\n",
    "        resultat_exceptionnel = produits_exceptionnels - charges_exceptionnelles\n",
    "        resultat_net = resultat_courant + resultat_exceptionnel - impot_benefices\n",
    "        \n",
    "        # Affichage des soldes\n",
    "        st.markdown(\"#### 📊 Soldes Intermédiaires de Gestion\")\n",
    "        \n",
    "        soldes_data = {\n",
    "            \"Marge commerciale\": marge_commerciale,\n",
    "            \"Valeur ajoutée\": valeur_ajoutee,\n",
    "            \"Excédent Brut d'Exploitation (EBE)\": ebe,\n",
    "            \"Résultat d'exploitation\": resultat_exploitation,\n",
    "            \"Résultat courant\": resultat_courant,\n",
    "            \"Résultat exceptionnel\": resultat_exceptionnel,\n",
    "            \"Résultat net\": resultat_net\n",
    "        }\n",
    "        \n",
    "        for solde, valeur in soldes_data.items():\n",
    "            col_s1, col_s2 = st.columns([2, 1])\n",
    "            with col_s1:\n",
    "                st.write(f\"**{solde}**\")\n",
    "            with col_s2:\n",
    "                st.write(f\"{valeur:,.0f} €\")\n",
    "        \n",
    "        # Graphique des soldes\n",
    "        fig_soldes = go.Figure()\n",
    "        fig_soldes.add_trace(go.Bar(\n",
    "            x=list(soldes_data.keys()),\n",
    "            y=list(soldes_data.values()),\n",
    "            marker_color=['blue', 'green', 'orange', 'red', 'purple', 'brown', 'black']\n",
    "        ))\n",
    "        fig_soldes.update_layout(\n",
    "            title=\"Évolution des Soldes Intermédiaires de Gestion\",\n",
    "            xaxis_tickangle=-45,\n",
    "            height=400\n",
    "        )\n",
    "        st.plotly_chart(fig_soldes, use_container_width=True)\n",
    "\n",
    "    with tab4:\n",
    "        st.subheader(\"🧮 Calculateur de Soldes Intermédiaires de Gestion\")\n",
    "        \n",
    "        st.markdown(\"\"\"\n",
    "        Les Soldes Intermédiaires de Gestion (SIG) permettent d'analyser la formation du résultat \n",
    "        et d'identifier les sources de performance ou de difficultés.\n",
    "        \"\"\")\n",
    "        \n",
    "        # Calculateur interactif\n",
    "        col_calc1, col_calc2 = st.columns(2)\n",
    "        \n",
    "        with col_calc1:\n",
    "            st.markdown(\"**Données d'entrée**\")\n",
    "            ca_input = st.number_input(\"Chiffre d'affaires HT\", value=500000, key=\"ca_sig\")\n",
    "            achats_consommes_input = st.number_input(\"Achats consommés\", value=300000, key=\"achats_sig\")\n",
    "            variation_stocks = st.number_input(\"Variation des stocks\", value=10000, key=\"var_stocks\")\n",
    "            production_immobilisee = st.number_input(\"Production immobilisée\", value=20000, key=\"prod_immob\")\n",
    "            subventions_exploitation = st.number_input(\"Subventions d'exploitation\", value=5000, key=\"subv_expl\")\n",
    "        \n",
    "        with col_calc2:\n",
    "            st.markdown(\"**Charges**\")\n",
    "            consommations_externes = st.number_input(\"Consommations externes\", value=80000, key=\"cons_ext\")\n",
    "            impots_taxes = st.number_input(\"Impôts et taxes\", value=15000, key=\"impots\")\n",
    "            charges_personnel_input = st.number_input(\"Charges de personnel\", value=120000, key=\"charges_pers\")\n",
    "            dotations_input = st.number_input(\"Dotations aux amortissements\", value=40000, key=\"dotations\")\n",
    "        \n",
    "        # Calcul automatique des SIG\n",
    "        marge_commerciale_calc = ca_input - achats_consommes_input + variation_stocks\n",
    "        production_periode = ca_input + production_immobilisee\n",
    "        valeur_ajoutee_calc = marge_commerciale_calc + production_periode - consommations_externes\n",
    "        ebe_calc = valeur_ajoutee_calc - impots_taxes - charges_personnel_input + subventions_exploitation\n",
    "        resultat_exploitation_calc = ebe_calc - dotations_input\n",
    "        \n",
    "        # Affichage des résultats\n",
    "        st.markdown(\"### 📈 Résultats des SIG\")\n",
    "        \n",
    "        sig_data = {\n",
    "            \"Marge commerciale\": marge_commerciale_calc,\n",
    "            \"Production de l'exercice\": production_periode,\n",
    "            \"Valeur ajoutée\": valeur_ajoutee_calc,\n",
    "            \"Excédent Brut d'Exploitation (EBE)\": ebe_calc,\n",
    "            \"Résultat d'exploitation\": resultat_exploitation_calc\n",
    "        }\n",
    "        \n",
    "        for sig, valeur in sig_data.items():\n",
    "            percentage = (valeur / ca_input) * 100 if ca_input > 0 else 0\n",
    "            st.metric(sig, f\"{valeur:,.0f} €\", f\"{percentage:.1f}% du CA\")\n",
    "        \n",
    "        # Interprétation automatique\n",
    "        st.markdown(\"### 💡 Interprétation\")\n",
    "        \n",
    "        if valeur_ajoutee_calc / ca_input > 0.4:\n",
    "            st.success(\"**✅ Excellente valeur ajoutée**: L'entreprise transforme efficacement ses achats en valeur\")\n",
    "        elif valeur_ajoutee_calc / ca_input > 0.2:\n",
    "            st.info(\"**📊 Valeur ajoutée correcte**: Niveau standard pour ce type d'activité\")\n",
    "        else:\n",
    "            st.warning(\"**⚠️ Valeur ajoutée faible**: L'entreprise pourrait améliorer sa marge de transformation\")\n",
    "        \n",
    "        if ebe_calc / ca_input > 0.1:\n",
    "            st.success(\"**💰 Bon EBE**: L'entreprise dégage une marge d'exploitation saine\")\n",
    "        else:\n",
    "            st.warning(\"**📉 EBE faible**: Risque sur la rentabilité opérationnelle\")\n",
    "\n",
    "# Section Performance et Rentabilité\n",
    "elif section == \"💰 Performance\":\n",
    "    st.header(\"💰 Diagnostic de la Performance et de la Rentabilité\")\n",
    "    \n",
    "    if not st.session_state.progression['ratios']:\n",
    "        if st.button(\"✅ Marquer ce module comme complété\"):\n",
    "            st.session_state.progression['ratios'] = True\n",
    "            st.session_state.notifications.append({\n",
    "                \"type\": \"success\", \n",
    "                \"message\": \"🎉 Module Performance complété !\", \n",
    "                \"date\": datetime.now().strftime(\"%Y-%m-%d\")\n",
    "            })\n",
    "            st.rerun()\n",
    "    \n",
    "    tab1, tab2, tab3 = st.tabs([\"📈 Création de Valeur (EVA)\", \"⚖️ Levier Financier\", \"🎯 Seuil de Rentabilité\"])\n",
    "    \n",
    "    with tab1:\n",
    "        st.subheader(\"📈 Simulateur de Création de Valeur (EVA)\")\n",
    "        \n",
    "        st.markdown(\"\"\"\n",
    "        L'**Economic Value Added (EVA)** mesure la création de valeur économique réelle après rémunération \n",
    "        de tous les apporteurs de capitaux, y compris les actionnaires.\n",
    "        \"\"\")\n",
    "        \n",
    "        col1, col2 = st.columns(2)\n",
    "        \n",
    "        with col1:\n",
    "            st.markdown(\"### 📥 Données d'entrée\")\n",
    "            resultat_exploitation = st.slider(\"Résultat d'exploitation (k€)\", 100, 5000, 1000, step=50)\n",
    "            capital_investi = st.slider(\"Capital économique investi (k€)\", 500, 20000, 5000, step=100)\n",
    "            taux_imposition = st.slider(\"Taux d'imposition (%)\", 15.0, 35.0, 25.0, step=0.5)\n",
    "            cout_capital = st.slider(\"Coût du capital (%)\", 5.0, 15.0, 8.0, step=0.5)\n",
    "        \n",
    "        with col2:\n",
    "            st.markdown(\"### 📊 Résultats\")\n",
    "            \n",
    "            # Calculs EVA\n",
    "            resultat_apres_impot = resultat_exploitation * (1 - taux_imposition/100)\n",
    "            roic = (resultat_apres_impot / capital_investi) * 100\n",
    "            eva = resultat_apres_impot - (capital_investi * cout_capital/100)\n",
    "            \n",
    "            # Affichage des résultats\n",
    "            st.metric(\"Rentabilité (ROIC)\", f\"{roic:.1f}%\")\n",
    "            st.metric(\"Coût du Capital\", f\"{cout_capital:.1f}%\")\n",
    "            st.metric(\"Economic Value Added (EVA)\", f\"{eva:,.0f} k€\")\n",
    "            \n",
    "            # Indicateur visuel\n",
    "            if eva > 0:\n",
    "                st.success(\"🎉 L'entreprise crée de la valeur !\")\n",
    "                st.balloons()\n",
    "            else:\n",
    "                st.error(\"⚠️ L'entreprise détruit de la valeur\")\n",
    "            \n",
    "            # Graphique de création de valeur\n",
    "            fig_eva = go.Figure()\n",
    "            fig_eva.add_trace(go.Indicator(\n",
    "                mode = \"number+delta\",\n",
    "                value = eva,\n",
    "                delta = {'reference': 0, 'relative': False},\n",
    "                title = {\"text\": \"EVA (k€)\"},\n",
    "                domain = {'x': [0, 1], 'y': [0, 1]}\n",
    "            ))\n",
    "            fig_eva.update_layout(height=200)\n",
    "            st.plotly_chart(fig_eva, use_container_width=True)\n",
    "        \n",
    "        # Explication pédagogique\n",
    "        with st.expander(\"🧠 Comprendre l'EVA\"):\n",
    "            st.markdown(\"\"\"\n",
    "            **Formule de l'EVA:**\n",
    "            ```\n",
    "            EVA = Résultat d'exploitation après impôts - (Capital investi × Coût du capital)\n",
    "            ```\n",
    "            \n",
    "            **Interprétation:**\n",
    "            - **EVA > 0**: L'entreprise crée de la valeur économique\n",
    "            - **EVA < 0**: L'entreprise détruit de la valeur\n",
    "            - **EVA = 0**: L'entreprise rémunère juste le coût du capital\n",
    "            \n",
    "            L'EVA est un indicateur plus exigeant que le simple bénéfice comptable.\n",
    "            \"\"\")\n",
    "    \n",
    "    with tab2:\n",
    "        st.subheader(\"⚖️ Calculateur de Levier Financier\")\n",
    "        \n",
    "        st.markdown(\"\"\"\n",
    "        Le **levier financier** mesure l'impact de l'endettement sur la rentabilité des capitaux propres.\n",
    "        Il peut amplifier les gains... mais aussi les pertes !\n",
    "        \"\"\")\n",
    "        \n",
    "        col1, col2 = st.columns(2)\n",
    "        \n",
    "        with col1:\n",
    "            st.markdown(\"### 📥 Données financières\")\n",
    "            resultat_expl = st.number_input(\"Résultat d'exploitation (k€)\", value=800, key=\"res_expl_levier\")\n",
    "            charges_financieres = st.number_input(\"Charges financières (k€)\", value=100, key=\"charges_fin_levier\")\n",
    "            capitaux_propres = st.number_input(\"Capitaux propres (k€)\", value=2000, key=\"cap_propres_levier\")\n",
    "            dette_financiere = st.number_input(\"Dettes financières (k€)\", value=1000, key=\"dette_fin_levier\")\n",
    "            taux_imposition_levier = st.slider(\"Taux d'imposition (%)\", 15.0, 35.0, 25.0, key=\"taux_imp_levier\")\n",
    "        \n",
    "        with col2:\n",
    "            st.markdown(\"### 📊 Impact du levier\")\n",
    "            \n",
    "            # Calculs\n",
    "            resultat_courant = resultat_expl - charges_financieres\n",
    "            resultat_net = resultat_courant * (1 - taux_imposition_levier/100)\n",
    "            roe_avec_dette = (resultat_net / capitaux_propres) * 100\n",
    "            \n",
    "            # Sans dette (pour comparaison)\n",
    "            resultat_net_sans_dette = resultat_expl * (1 - taux_imposition_levier/100)\n",
    "            roe_sans_dette = (resultat_net_sans_dette / (capitaux_propres + dette_financiere)) * 100\n",
    "            \n",
    "            # Effet de levier\n",
    "            effet_levier = roe_avec_dette - roe_sans_dette\n",
    "            \n",
    "            st.metric(\"ROE avec endettement\", f\"{roe_avec_dette:.1f}%\")\n",
    "            st.metric(\"ROE sans endettement\", f\"{roe_sans_dette:.1f}%\")\n",
    "            st.metric(\"Effet de levier\", f\"{effet_levier:+.1f} points\")\n",
    "            \n",
    "            if effet_levier > 0:\n",
    "                st.success(\"✅ Le levier financier est positif\")\n",
    "            else:\n",
    "                st.warning(\"📉 Le levier financier est négatif\")\n",
    "            \n",
    "            # Graphique comparatif\n",
    "            fig_levier = go.Figure()\n",
    "            fig_levier.add_trace(go.Bar(\n",
    "                name='Avec endettement',\n",
    "                x=['ROE'],\n",
    "                y=[roe_avec_dette],\n",
    "                marker_color='blue'\n",
    "            ))\n",
    "            fig_levier.add_trace(go.Bar(\n",
    "                name='Sans endettement',\n",
    "                x=['ROE'],\n",
    "                y=[roe_sans_dette],\n",
    "                marker_color='lightblue'\n",
    "            ))\n",
    "            fig_levier.update_layout(\n",
    "                title=\"Impact de l'endettement sur la rentabilité\",\n",
    "                barmode='group',\n",
    "                height=300\n",
    "            )\n",
    "            st.plotly_chart(fig_levier, use_container_width=True)\n",
    "        \n",
    "        # Analyse de sensibilité\n",
    "        st.markdown(\"### 🎚️ Analyse de Sensibilité\")\n",
    "        \n",
    "        taux_interet = st.slider(\"Taux d'intérêt sur la dette (%)\", 1.0, 10.0, 5.0)\n",
    "        \n",
    "        # Calcul du point d'équilibre\n",
    "        roe_minimal = roe_sans_dette\n",
    "        resultat_expl_minimal = (roe_minimal / 100) * (capitaux_propres + dette_financiere) / (1 - taux_imposition_levier/100)\n",
    "        \n",
    "        st.metric(\"Résultat d'exploitation minimum requis\", f\"{resultat_expl_minimal:,.0f} k€\")\n",
    "        \n",
    "        if resultat_expl > resultat_expl_minimal:\n",
    "            st.success(\"✅ Niveau de résultat suffisant pour un levier positif\")\n",
    "        else:\n",
    "            st.warning(\"⚠️ Résultat d'exploitation insuffisant pour justifier l'endettement\")\n",
    "    \n",
    "    with tab3:\n",
    "        st.subheader(\"🎯 Calculateur de Seuil de Rentabilité\")\n",
    "        \n",
    "        st.markdown(\"\"\"\n",
    "        Le **seuil de rentabilité** (ou point mort) est le niveau d'activité à partir duquel l'entreprise \n",
    "        commence à réaliser des bénéfices. Il se calcule en distinguant les coûts fixes et variables.\n",
    "        \"\"\")\n",
    "        \n",
    "        col1, col2 = st.columns(2)\n",
    "        \n",
    "        with col1:\n",
    "            st.markdown(\"### 📥 Données de coûts\")\n",
    "            couts_fixes = st.number_input(\"Coûts fixes annuels (k€)\", value=300)\n",
    "            cout_variable_unitaire = st.number_input(\"Coût variable unitaire (€)\", value=40)\n",
    "            prix_vente_unitaire = st.number_input(\"Prix de vente unitaire (€)\", value=100)\n",
    "            capacite_production = st.number_input(\"Capacité de production (unités)\", value=10000)\n",
    "        \n",
    "        with col2:\n",
    "            st.markdown(\"### 📊 Résultats\")\n",
    "            \n",
    "            # Calculs\n",
    "            marge_unitaire = prix_vente_unitaire - cout_variable_unitaire\n",
    "            taux_marge = (marge_unitaire / prix_vente_unitaire) * 100\n",
    "            seuil_volume = couts_fixes * 1000 / marge_unitaire if marge_unitaire > 0 else 0\n",
    "            seuil_ca = seuil_volume * prix_vente_unitaire / 1000  # en k€\n",
    "            marge_securite = ((capacite_production - seuil_volume) / capacite_production) * 100\n",
    "            \n",
    "            st.metric(\"Seuil de rentabilité (volume)\", f\"{seuil_volume:,.0f} unités\")\n",
    "            st.metric(\"Seuil de rentabilité (CA)\", f\"{seuil_ca:,.1f} k€\")\n",
    "            st.metric(\"Taux de marge\", f\"{taux_marge:.1f}%\")\n",
    "            st.metric(\"Marge de sécurité\", f\"{marge_securite:.1f}%\")\n",
    "            \n",
    "            if marge_securite > 20:\n",
    "                st.success(\"✅ Bonne marge de sécurité\")\n",
    "            elif marge_securite > 10:\n",
    "                st.warning(\"⚠️ Marge de sécurité modérée\")\n",
    "            else:\n",
    "                st.error(\"❌ Marge de sécurité faible\")\n",
    "        \n",
    "        # Graphique du seuil de rentabilité\n",
    "        volumes = np.linspace(0, capacite_production * 1.2, 100)\n",
    "        couts_totaux = couts_fixes * 1000 + cout_variable_unitaire * volumes\n",
    "        chiffre_affaires = prix_vente_unitaire * volumes\n",
    "        \n",
    "        fig_seuil = go.Figure()\n",
    "        \n",
    "        fig_seuil.add_trace(go.Scatter(\n",
    "            x=volumes, y=couts_totaux,\n",
    "            mode='lines',\n",
    "            name='Coûts totaux',\n",
    "            line=dict(color='red', width=3)\n",
    "        ))\n",
    "        \n",
    "        fig_seuil.add_trace(go.Scatter(\n",
    "            x=volumes, y=chiffre_affaires,\n",
    "            mode='lines',\n",
    "            name='Chiffre d\\'affaires',\n",
    "            line=dict(color='green', width=3)\n",
    "        ))\n",
    "        \n",
    "        # Point de seuil\n",
    "        fig_seuil.add_trace(go.Scatter(\n",
    "            x=[seuil_volume], y=[seuil_ca * 1000],\n",
    "            mode='markers',\n",
    "            name='Seuil de rentabilité',\n",
    "            marker=dict(color='black', size=10, symbol='x')\n",
    "        ))\n",
    "        \n",
    "        fig_seuil.update_layout(\n",
    "            title=\"Graphique du Seuil de Rentabilité\",\n",
    "            xaxis_title=\"Volume (unités)\",\n",
    "            yaxis_title=\"Montant (€)\",\n",
    "            showlegend=True,\n",
    "            height=400\n",
    "        )\n",
    "        \n",
    "        st.plotly_chart(fig_seuil, use_container_width=True)\n",
    "        \n",
    "        # Analyse de sensibilité\n",
    "        st.markdown(\"### 🎚️ Analyse de Sensibilité\")\n",
    "        \n",
    "        col_sens1, col_sens2 = st.columns(2)\n",
    "        \n",
    "        with col_sens1:\n",
    "            variation_prix = st.slider(\"Variation du prix de vente (%)\", -20, 20, 0)\n",
    "            nouveau_prix = prix_vente_unitaire * (1 + variation_prix/100)\n",
    "            nouvelle_marge = nouveau_prix - cout_variable_unitaire\n",
    "            nouveau_seuil = couts_fixes * 1000 / nouvelle_marge if nouvelle_marge > 0 else 0\n",
    "            \n",
    "            st.metric(f\"Seuil avec prix {variation_prix:+}%\", f\"{nouveau_seuil:,.0f} unités\")\n",
    "        \n",
    "        with col_sens2:\n",
    "            variation_couts_fixes = st.slider(\"Variation des coûts fixes (%)\", -20, 20, 0)\n",
    "            nouveaux_couts_fixes = couts_fixes * (1 + variation_couts_fixes/100)\n",
    "            nouveau_seuil_cf = nouveaux_couts_fixes * 1000 / marge_unitaire if marge_unitaire > 0 else 0\n",
    "            \n",
    "            st.metric(f\"Seuil avec CF {variation_couts_fixes:+}%\", f\"{nouveau_seuil_cf:,.0f} unités\")\n",
    "\n",
    "# Section Équilibre Financier\n",
    "elif section == \"⚖️ Équilibre Financier\":\n",
    "    st.header(\"⚖️ L'Équilibre Financier et la Trésorerie\")\n",
    "    \n",
    "    if not st.session_state.progression['equilibre']:\n",
    "        if st.button(\"✅ Marquer ce module comme complété\"):\n",
    "            st.session_state.progression['equilibre'] = True\n",
    "            st.session_state.notifications.append({\n",
    "                \"type\": \"success\", \n",
    "                \"message\": \"🎉 Module Équilibre Financier complété !\", \n",
    "                \"date\": datetime.now().strftime(\"%Y-%m-%d\")\n",
    "            })\n",
    "            st.rerun()\n",
    "    \n",
    "    st.subheader(\"🧊 Simulateur FR-BFR-TN\")\n",
    "    \n",
    "    col1, col2, col3 = st.columns(3)\n",
    "    \n",
    "    with col1:\n",
    "        st.markdown(\"### 📥 Données d'entrée\")\n",
    "        capitaux_permanents = st.number_input(\"Capitaux permanents (k€)\", value=800, key=\"cap_permanents\")\n",
    "        actif_immobilise = st.number_input(\"Actif immobilisé (k€)\", value=500, key=\"act_immobilise\")\n",
    "        stocks = st.number_input(\"Stocks (k€)\", value=150, key=\"stocks_equilibre\")\n",
    "        clients = st.number_input(\"Créances clients (k€)\", value=200, key=\"clients_equilibre\")\n",
    "        fournisseurs = st.number_input(\"Dettes fournisseurs (k€)\", value=120, key=\"fournisseurs_equilibre\")\n",
    "        disponibilites = st.number_input(\"Disponibilités (k€)\", value=80, key=\"dispo_equilibre\")\n",
    "        concours_bancaires = st.number_input(\"Concours bancaires (k€)\", value=50, key=\"concours_equilibre\")\n",
    "    \n",
    "    with col2:\n",
    "        st.markdown(\"### 📊 Calculs\")\n",
    "        # Calcul des indicateurs\n",
    "        fr = capitaux_permanents - actif_immobilise\n",
    "        bfr = (stocks + clients) - fournisseurs\n",
    "        tn = fr - bfr\n",
    "        \n",
    "        st.metric(\"Fonds de Roulement (FR)\", f\"{fr:,.0f} k€\")\n",
    "        st.metric(\"Besoin en Fonds de Roulement (BFR)\", f\"{bfr:,.0f} k€\")\n",
    "        st.metric(\"Trésorerie Nette (TN)\", f\"{tn:,.0f} k€\")\n",
    "        \n",
    "        # Calcul de la trésorerie réelle\n",
    "        tresorerie_reelle = disponibilites - concours_bancaires\n",
    "        st.metric(\"Trésorerie réelle\", f\"{tresorerie_reelle:,.0f} k€\")\n",
    "    \n",
    "    with col3:\n",
    "        st.markdown(\"### 🩺 Diagnostic\")\n",
    "        if tn > 0:\n",
    "            st.success(\"\"\"\n",
    "            ✅ **Situation saine**\n",
    "            - Trésorerie excédentaire\n",
    "            - L'entreprise finance son BFR et dégage un excédent\n",
    "            - Bonne capacité d'autofinancement\n",
    "            \"\"\")\n",
    "        elif tn == 0:\n",
    "            st.info(\"\"\"\n",
    "            ⚖️ **Situation équilibrée**\n",
    "            - Le FR finance exactement le BFR\n",
    "            - Trésorerie nulle\n",
    "            - Situation stable mais peu de marge de manœuvre\n",
    "            \"\"\")\n",
    "        else:\n",
    "            st.error(\"\"\"\n",
    "            ❌ **Situation tendue**\n",
    "            - Le FR ne couvre pas le BFR\n",
    "            - Trésorerie négative → recours au découvert\n",
    "            - Risque de difficultés de trésorerie\n",
    "            \"\"\")\n",
    "        \n",
    "        # Vérification cohérence\n",
    "        if abs(tn - tresorerie_reelle) > 1:\n",
    "            st.warning(\"⚠️ Écart entre TN théorique et trésorerie réelle\")\n",
    "    \n",
    "    # Graphique de l'équilibre financier\n",
    "    fig = go.Figure()\n",
    "    \n",
    "    fig.add_trace(go.Bar(\n",
    "        name='FR',\n",
    "        y=['Fonds de Roulement'],\n",
    "        x=[fr],\n",
    "        orientation='h',\n",
    "        marker_color='green'\n",
    "    ))\n",
    "    \n",
    "    fig.add_trace(go.Bar(\n",
    "        name='BFR',\n",
    "        y=['Besoin FR'],\n",
    "        x=[bfr],\n",
    "        orientation='h',\n",
    "        marker_color='orange'\n",
    "    ))\n",
    "    \n",
    "    fig.add_trace(go.Bar(\n",
    "        name='TN',\n",
    "        y=['Trésorerie Nette'],\n",
    "        x=[tn],\n",
    "        orientation='h',\n",
    "        marker_color='blue'\n",
    "    ))\n",
    "    \n",
    "    fig.update_layout(\n",
    "        title=\"Représentation de l'Équilibre Financier\",\n",
    "        barmode='overlay',\n",
    "        height=300,\n",
    "        showlegend=True\n",
    "    )\n",
    "    \n",
    "    st.plotly_chart(fig, use_container_width=True)\n",
    "    \n",
    "    # Analyse des délais\n",
    "    st.subheader(\"⏱️ Analyse des Délais d'Exploitation\")\n",
    "    \n",
    "    col_del1, col_del2, col_del3 = st.columns(3)\n",
    "    \n",
    "    with col_del1:\n",
    "        ca_annuel = st.number_input(\"CA annuel (k€)\", value=1200, key=\"ca_delais\")\n",
    "        delai_clients = st.slider(\"Délai clients (jours)\", 0, 120, 60)\n",
    "    \n",
    "    with col_del2:\n",
    "        delai_stocks = st.slider(\"Délai stocks (jours)\", 0, 90, 45)\n",
    "    \n",
    "    with col_del3:\n",
    "        delai_fournisseurs = st.slider(\"Délai fournisseurs (jours)\", 0, 90, 30)\n",
    "    \n",
    "    # Calcul du cycle de trésorerie\n",
    "    cycle_exploitation = delai_stocks + delai_clients\n",
    "    cycle_financement = delai_fournisseurs\n",
    "    cycle_tresorerie = cycle_exploitation - cycle_financement\n",
    "    \n",
    "    st.metric(\"Cycle d'exploitation\", f\"{cycle_exploitation} jours\")\n",
    "    st.metric(\"Cycle de financement\", f\"{cycle_financement} jours\")\n",
    "    st.metric(\"Cycle de trésorerie\", f\"{cycle_tresorerie} jours\")\n",
    "    \n",
    "    if cycle_tresorerie > 0:\n",
    "        st.info(\"🔁 Cycle de trésorerie positif : besoin de financement du cycle d'exploitation\")\n",
    "    else:\n",
    "        st.success(\"💰 Cycle de trésorerie négatif : l'exploitation génère de la trésorerie\")\n",
    "    \n",
    "    # Recommandations d'optimisation\n",
    "    st.subheader(\"💡 Recommandations d'Optimisation\")\n",
    "    \n",
    "    if delai_clients > 60:\n",
    "        st.warning(\"**⏳ Délai clients trop long**: Envisagez un relancement client ou un affacturage\")\n",
    "    \n",
    "    if delai_stocks > 60:\n",
    "        st.warning(\"**📦 Stocks élevés**: Optimisez la gestion des stocks et la rotation\")\n",
    "    \n",
    "    if delai_fournisseurs < 30:\n",
    "        st.info(\"**💳 Délai fournisseurs court**: Négociez de meilleurs délais de paiement\")\n",
    "\n",
    "# Section Analyse par Ratios\n",
    "elif section == \"📊 Analyse par Ratios\":\n",
    "    st.header(\"📊 Analyse Financière par les Ratios\")\n",
    "    \n",
    "    tab1, tab2, tab3, tab4 = st.tabs([\"💰 Rentabilité\", \"⚖️ Structure\", \"📈 Activité\", \"🧮 Liquidité\"])\n",
    "    \n",
    "    with tab1:\n",
    "        st.subheader(\"Ratios de Rentabilité\")\n",
    "        \n",
    "        col1, col2 = st.columns(2)\n",
    "        \n",
    "        with col1:\n",
    "            ca = st.number_input(\"Chiffre d'affaires (k€)\", value=2000, key=\"ca_ratios\")\n",
    "            resultat_net = st.number_input(\"Résultat net (k€)\", value=150, key=\"res_net_ratios\")\n",
    "            resultat_exploitation = st.number_input(\"Résultat d'exploitation (k€)\", value=200, key=\"res_expl_ratios\")\n",
    "            capitaux_propres = st.number_input(\"Capitaux propres (k€)\", value=1000, key=\"cap_propres_ratios\")\n",
    "            actif_total = st.number_input(\"Actif total (k€)\", value=2000, key=\"actif_total_ratios\")\n",
    "        \n",
    "        with col2:\n",
    "            # Calcul des ratios\n",
    "            roe = (resultat_net / capitaux_propres) * 100\n",
    "            roa = (resultat_net / actif_total) * 100\n",
    "            ros = (resultat_net / ca) * 100\n",
    "            marge_ebit = (resultat_exploitation / ca) * 100\n",
    "            \n",
    "            st.metric(\"ROE (Return on Equity)\", f\"{roe:.1f}%\")\n",
    "            st.metric(\"ROA (Return on Assets)\", f\"{roa:.1f}%\")\n",
    "            st.metric(\"ROS (Return on Sales)\", f\"{ros:.1f}%\")\n",
    "            st.metric(\"Marge d'exploitation (EBIT)\", f\"{marge_ebit:.1f}%\")\n",
    "            \n",
    "            # Benchmarking\n",
    "            st.markdown(\"#### 📊 Référentiels\")\n",
    "            st.write(\"**ROE souhaitable**: > 8-10%\")\n",
    "            st.write(\"**ROA typique**: 3-8%\")\n",
    "            st.write(\"**ROS variable**: selon le secteur\")\n",
    "            \n",
    "            # Diagnostic\n",
    "            if roe > 15:\n",
    "                st.success(\"✅ Excellente rentabilité des capitaux propres\")\n",
    "            elif roe > 8:\n",
    "                st.info(\"📊 Rentabilité correcte\")\n",
    "            else:\n",
    "                st.warning(\"⚠️ Rentabilité à améliorer\")\n",
    "    \n",
    "    with tab2:\n",
    "        st.subheader(\"Ratios de Structure Financière\")\n",
    "        \n",
    "        col1, col2 = st.columns(2)\n",
    "        \n",
    "        with col1:\n",
    "            dette_financiere = st.number_input(\"Dettes financières (k€)\", value=800, key=\"dette_fin_struct\")\n",
    "            capitaux_propres_struct = st.number_input(\"Capitaux propres (k€)\", value=1000, key=\"cap_propres_struct\")\n",
    "            actif_immobilise = st.number_input(\"Actif immobilisé (k€)\", value=1200, key=\"act_immobilise_struct\")\n",
    "            capitaux_permanents = st.number_input(\"Capitaux permanents (k€)\", value=1800, key=\"cap_permanents_struct\")\n",
    "        \n",
    "        with col2:\n",
    "            # Calcul des ratios\n",
    "            leverage = dette_financiere / capitaux_propres_struct\n",
    "            autonomie_financiere = capitaux_propres_struct / (dette_financiere + capitaux_propres_struct) * 100\n",
    "            couverture_immobilisation = capitaux_permanents / actif_immobilise\n",
    "            \n",
    "            st.metric(\"Ratio d'endettement\", f\"{leverage:.2f}\")\n",
    "            st.metric(\"Autonomie financière\", f\"{autonomie_financiere:.1f}%\")\n",
    "            st.metric(\"Couverture des immobilisations\", f\"{couverture_immobilisation:.2f}\")\n",
    "            \n",
    "            # Interprétation\n",
    "            if leverage < 1:\n",
    "                st.success(\"✅ Structure financière saine\")\n",
    "            elif leverage < 2:\n",
    "                st.warning(\"⚠️ Endettement modéré\")\n",
    "            else:\n",
    "                st.error(\"❌ Endettement élevé\")\n",
    "                \n",
    "            if autonomie_financiere > 33:\n",
    "                st.success(\"✅ Bonne autonomie financière\")\n",
    "            else:\n",
    "                st.warning(\"⚠️ Autonomie financière faible\")\n",
    "    \n",
    "    with tab3:\n",
    "        st.subheader(\"Ratios d'Activité et d'Efficacité\")\n",
    "        \n",
    "        col1, col2 = st.columns(2)\n",
    "        \n",
    "        with col1:\n",
    "            ca_activite = st.number_input(\"CA annuel (k€)\", value=2000, key=\"ca_activite\")\n",
    "            clients_moyens = st.number_input(\"Créances clients moyennes (k€)\", value=300, key=\"clients_moyens\")\n",
    "            stocks_moyens = st.number_input(\"Stocks moyens (k€)\", value=200, key=\"stocks_moyens\")\n",
    "            fournisseurs_moyens = st.number_input(\"Dettes fournisseurs moyennes (k€)\", value=150, key=\"fournisseurs_moyens\")\n",
    "        \n",
    "        with col2:\n",
    "            # Calcul des ratios\n",
    "            dso = (clients_moyens / ca_activite) * 365  # Days Sales Outstanding\n",
    "            dio = (stocks_moyens / ca_activite) * 365   # Days Inventory Outstanding\n",
    "            dpo = (fournisseurs_moyens / ca_activite) * 365  # Days Payable Outstanding\n",
    "            ccc = dso + dio - dpo  # Cash Conversion Cycle\n",
    "            \n",
    "            st.metric(\"Délai clients (jours)\", f\"{dso:.0f} j\")\n",
    "            st.metric(\"Délai stocks (jours)\", f\"{dio:.0f} j\")\n",
    "            st.metric(\"Délai fournisseurs (jours)\", f\"{dpo:.0f} j\")\n",
    "            st.metric(\"Cycle de trésorerie\", f\"{ccc:.0f} j\")\n",
    "            \n",
    "            if ccc < 0:\n",
    "                st.success(\"🎉 Trésorerie générée par le cycle d'exploitation\")\n",
    "            else:\n",
    "                st.info(\"💡 BFR à financer\")\n",
    "                \n",
    "            # Cibles sectorielles\n",
    "            st.markdown(\"#### 🎯 Cibles sectorielles typiques\")\n",
    "            st.write(\"**Délai clients**: 30-60 jours\")\n",
    "            st.write(\"**Délai stocks**: 30-90 jours\")\n",
    "            st.write(\"**Délai fournisseurs**: 30-60 jours\")\n",
    "    \n",
    "    with tab4:\n",
    "        st.subheader(\"Ratios de Liquidité\")\n",
    "        \n",
    "        col1, col2 = st.columns(2)\n",
    "        \n",
    "        with col1:\n",
    "            actif_circulant = st.number_input(\"Actif circulant (k€)\", value=800, key=\"actif_circulant\")\n",
    "            stocks_liquidite = st.number_input(\"Stocks (k€)\", value=200, key=\"stocks_liquidite\")\n",
    "            disponibilites = st.number_input(\"Disponibilités (k€)\", value=100, key=\"disponibilites\")\n",
    "            passif_courant = st.number_input(\"Passif courant (k€)\", value=500, key=\"passif_courant\")\n",
    "        \n",
    "        with col2:\n",
    "            # Calcul des ratios\n",
    "            liquidite_generale = actif_circulant / passif_courant\n",
    "            liquidite_reduite = (actif_circulant - stocks_liquidite) / passif_courant\n",
    "            liquidite_immediate = disponibilites / passif_courant\n",
    "            \n",
    "            st.metric(\"Liquidité générale\", f\"{liquidite_generale:.2f}\")\n",
    "            st.metric(\"Liquidité réduite\", f\"{liquidite_reduite:.2f}\")\n",
    "            st.metric(\"Liquidité immédiate\", f\"{liquidite_immediate:.2f}\")\n",
    "            \n",
    "            # Seuils de référence\n",
    "            st.markdown(\"#### 📈 Seuils de référence\")\n",
    "            st.write(\"**Liquidité générale > 1.2**\")\n",
    "            st.write(\"**Liquidité réduite > 0.8**\")\n",
    "            st.write(\"**Liquidité immédiate > 0.2**\")\n",
    "            \n",
    "            # Diagnostic\n",
    "            if liquidite_generale > 1.2:\n",
    "                st.success(\"✅ Bonne liquidité générale\")\n",
    "            else:\n",
    "                st.warning(\"⚠️ Liquidité générale à surveiller\")\n",
    "\n",
    "# Section Évaluation d'Entreprise\n",
    "elif section == \"🎯 Évaluation d'Entreprise\":\n",
    "    st.header(\"🎯 Évaluation d'Entreprise et Risque de Crédit\")\n",
    "    \n",
    "    if not st.session_state.progression['evaluation']:\n",
    "        if st.button(\"✅ Marquer ce module comme complété\"):\n",
    "            st.session_state.progression['evaluation'] = True\n",
    "            st.session_state.notifications.append({\n",
    "                \"type\": \"success\", \n",
    "                \"message\": \"🎉 Module Évaluation complété !\", \n",
    "                \"date\": datetime.now().strftime(\"%Y-%m-%d\")\n",
    "            })\n",
    "            st.rerun()\n",
    "    \n",
    "    method = st.selectbox(\n",
    "        \"Choisissez la méthode d'évaluation:\",\n",
    "        [\"Flux de Trésorerie Actualisés (DCF)\", \"Multiples de Marché\", \"Approche Patrimoniale\"]\n",
    "    )\n",
    "    \n",
    "    if method == \"Flux de Trésorerie Actualisés (DCF)\":\n",
    "        st.subheader(\"💎 Calculateur DCF\")\n",
    "        \n",
    "        col1, col2 = st.columns(2)\n",
    "        \n",
    "        with col1:\n",
    "            st.markdown(\"### Hypothèses\")\n",
    "            fcf_actuel = st.number_input(\"Free Cash Flow actuel (k€)\", value=500)\n",
    "            croissance_5ans = st.slider(\"Croissance 5 premières années (%)\", 1.0, 15.0, 5.0)\n",
    "            croissance_perpetuite = st.slider(\"Croissance à perpétuité (%)\", 0.0, 5.0, 2.0)\n",
    "            wacc = st.slider(\"WACC (%)\", 5.0, 15.0, 9.0)\n",
    "            dette_financiere = st.number_input(\"Dette financière nette (k€)\", value=800)\n",
    "        \n",
    "        with col2:\n",
    "            st.markdown(\"### Calcul de la Valeur\")\n",
    "            \n",
    "            # Calcul DCF simplifié\n",
    "            valeur_flux_explicites = 0\n",
    "            fcf = fcf_actuel\n",
    "            \n",
    "            for annee in range(1, 6):\n",
    "                fcf *= (1 + croissance_5ans/100)\n",
    "                valeur_flux_explicites += fcf / ((1 + wacc/100) ** annee)\n",
    "            \n",
    "            # Valeur terminale\n",
    "            fcf_annee5 = fcf_actuel * ((1 + croissance_5ans/100) ** 5)\n",
    "            valeur_terminale = (fcf_annee5 * (1 + croissance_perpetuite/100)) / ((wacc/100) - (croissance_perpetuite/100))\n",
    "            valeur_terminale_actualisee = valeur_terminale / ((1 + wacc/100) ** 5)\n",
    "            \n",
    "            valeur_entreprise = valeur_flux_explicites + valeur_terminale_actualisee\n",
    "            valeur_actions = valeur_entreprise - dette_financiere\n",
    "            \n",
    "            st.metric(\"Valeur de l'entreprise\", f\"{valeur_entreprise:,.0f} k€\")\n",
    "            st.metric(\"Valeur des flux explicites\", f\"{valeur_flux_explicites:,.0f} k€\")\n",
    "            st.metric(\"Valeur terminale actualisée\", f\"{valeur_terminale_actualisee:,.0f} k€\")\n",
    "            st.metric(\"Valeur des actions\", f\"{valeur_actions:,.0f} k€\")\n",
    "            \n",
    "            # Sensibilité\n",
    "            st.markdown(\"#### 🎚️ Analyse de Sensibilité\")\n",
    "            sensibilite_croissance = st.slider(\"Variation croissance (%)\", -2.0, 2.0, 0.0)\n",
    "            sensibilite_wacc = st.slider(\"Variation WACC (%)\", -1.0, 1.0, 0.0)\n",
    "            \n",
    "            nouvelle_croissance = croissance_perpetuite + sensibilite_croissance\n",
    "            nouveau_wacc = wacc + sensibilite_wacc\n",
    "            \n",
    "            if nouveau_wacc/100 > nouvelle_croissance/100:\n",
    "                nouvelle_valeur_terminale = (fcf_annee5 * (1 + nouvelle_croissance/100)) / ((nouveau_wacc/100) - (nouvelle_croissance/100))\n",
    "                nouvelle_valeur_entreprise = valeur_flux_explicites + (nouvelle_valeur_terminale / ((1 + nouveau_wacc/100) ** 5))\n",
    "                variation = ((nouvelle_valeur_entreprise - valeur_entreprise) / valeur_entreprise) * 100\n",
    "                \n",
    "                st.metric(\"Nouvelle valeur entreprise\", f\"{nouvelle_valeur_entreprise:,.0f} k€\", f\"{variation:+.1f}%\")\n",
    "    \n",
    "    elif method == \"Multiples de Marché\":\n",
    "        st.subheader(\"📊 Évaluation par les Multiples\")\n",
    "        \n",
    "        col1, col2 = st.columns(2)\n",
    "        \n",
    "        with col1:\n",
    "            st.markdown(\"### Données de l'entreprise\")\n",
    "            ebitda = st.number_input(\"EBITDA (k€)\", value=400)\n",
    "            resultat_net = st.number_input(\"Résultat net (k€)\", value=250)\n",
    "            chiffre_affaires = st.number_input(\"Chiffre d'affaires (k€)\", value=2000)\n",
    "            dette_nette = st.number_input(\"Dette nette (k€)\", value=800)\n",
    "        \n",
    "        with col2:\n",
    "            st.markdown(\"### Multiples de référence\")\n",
    "            multiple_ebitda = st.slider(\"Multiple EBITDA\", 4.0, 12.0, 8.0)\n",
    "            multiple_resultat = st.slider(\"Multiple du résultat net\", 8.0, 20.0, 12.0)\n",
    "            multiple_ca = st.slider(\"Multiple du CA\", 0.5, 3.0, 1.5)\n",
    "            \n",
    "            # Calculs\n",
    "            valeur_ebitda = ebitda * multiple_ebitda\n",
    "            valeur_resultat = resultat_net * multiple_resultat\n",
    "            valeur_ca = chiffre_affaires * multiple_ca\n",
    "            \n",
    "            # Moyenne pondérée\n",
    "            valeur_moyenne = (valeur_ebitda + valeur_resultat + valeur_ca) / 3\n",
    "            valeur_entreprise = valeur_moyenne\n",
    "            valeur_actions = valeur_entreprise - dette_nette\n",
    "            \n",
    "            st.metric(\"Valeur par EBITDA\", f\"{valeur_ebitda:,.0f} k€\")\n",
    "            st.metric(\"Valeur par résultat net\", f\"{valeur_resultat:,.0f} k€\")\n",
    "            st.metric(\"Valeur par CA\", f\"{valeur_ca:,.0f} k€\")\n",
    "            st.metric(\"Valeur moyenne entreprise\", f\"{valeur_entreprise:,.0f} k€\")\n",
    "            st.metric(\"Valeur des actions\", f\"{valeur_actions:,.0f} k€\")\n",
    "    \n",
    "    else:  # Approche Patrimoniale\n",
    "        st.subheader(\"🏛️ Approche Patrimoniale\")\n",
    "        \n",
    "        col1, col2 = st.columns(2)\n",
    "        \n",
    "        with col1:\n",
    "            st.markdown(\"### Actifs\")\n",
    "            actif_immobilise = st.number_input(\"Actif immobilisé (k€)\", value=1500)\n",
    "            actif_circulant = st.number_input(\"Actif circulant (k€)\", value=800)\n",
    "            plus_values_latentes = st.number_input(\"Plus-values latentes (k€)\", value=200)\n",
    "            actifs_incorporels = st.number_input(\"Actifs incorporels (k€)\", value=300)\n",
    "        \n",
    "        with col2:\n",
    "            st.markdown(\"### Passifs\")\n",
    "            dettes_financieres = st.number_input(\"Dettes financières (k€)\", value=800)\n",
    "            dettes_exploitation = st.number_input(\"Dettes d'exploitation (k€)\", value=400)\n",
    "            provisions = st.number_input(\"Provisions (k€)\", value=100)\n",
    "            moins_values_latentes = st.number_input(\"Moins-values latentes (k€)\", value=50)\n",
    "        \n",
    "        # Calcul ANC\n",
    "        actif_reel = actif_immobilise + actif_circulant + plus_values_latentes + actifs_incorporels\n",
    "        passif_reel = dettes_financieres + dettes_exploitation + provisions + moins_values_latentes\n",
    "        anc = actif_reel - passif_reel\n",
    "        \n",
    "        st.metric(\"Actif Net Comptable (ANC)\", f\"{anc:,.0f} k€\")\n",
    "        st.metric(\"Actif réel\", f\"{actif_reel:,.0f} k€\")\n",
    "        st.metric(\"Passif réel\", f\"{passif_reel:,.0f} k€\")\n",
    "        \n",
    "        # Goodwill estimé\n",
    "        st.markdown(\"### 🎯 Goodwill estimé\")\n",
    "        rentabilite_souhaitee = st.slider(\"Rentabilité souhaitée (%)\", 8.0, 20.0, 12.0)\n",
    "        resultat_net_recurrent = st.number_input(\"Résultat net récurrent (k€)\", value=180)\n",
    "        \n",
    "        if rentabilite_souhaitee > 0:\n",
    "            valeur_rentabilite = resultat_net_recurrent / (rentabilite_souhaitee/100)\n",
    "            goodwill = valeur_rentabilite - anc\n",
    "            valeur_totale = anc + max(0, goodwill)\n",
    "            \n",
    "            st.metric(\"Valeur de rentabilité\", f\"{valeur_rentabilite:,.0f} k€\")\n",
    "            st.metric(\"Goodwill estimé\", f\"{goodwill:,.0f} k€\")\n",
    "            st.metric(\"Valeur totale\", f\"{valeur_totale:,.0f} k€\")\n",
    "\n",
    "# Section Cas Pratiques\n",
    "elif section == \"🏢 Cas Pratiques\":\n",
    "    st.header(\"🏢 Études de Cas Complets\")\n",
    "    \n",
    "    if not st.session_state.progression['cas_pratiques']:\n",
    "        if st.button(\"✅ Marquer ce module comme complété\"):\n",
    "            st.session_state.progression['cas_pratiques'] = True\n",
    "            st.session_state.notifications.append({\n",
    "                \"type\": \"success\", \n",
    "                \"message\": \"🎉 Module Cas Pratiques complété !\", \n",
    "                \"date\": datetime.now().strftime(\"%Y-%m-%d\")\n",
    "            })\n",
    "            st.rerun()\n",
    "    \n",
    "    cas_choice = st.selectbox(\n",
    "        \"Choisissez un cas d'étude:\",\n",
    "        [\"🚀 Startup Tech\", \"🏭 PMI Industrielle\", \"🛒 Commerce de Détail\", \"💻 ESI (Entreprise de Services Informatiques)\"]\n",
    "    )\n",
    "    \n",
    "    if cas_choice == \"🚀 Startup Tech\":\n",
    "        st.subheader(\"🚀 Startup Technologique - Croissance Rapide\")\n",
    "        \n",
    "        st.markdown(\"\"\"\n",
    "        **Contexte**: Une startup SaaS avec une croissance de 50% par an mais des pertes importantes.\n",
    "        **Enjeu**: Évaluer la soutenabilité du modèle et les besoins de financement.\n",
    "        \"\"\")\n",
    "        \n",
    "        col1, col2 = st.columns(2)\n",
    "        \n",
    "        with col1:\n",
    "            st.markdown(\"**Données de la startup**\")\n",
    "            ca = st.slider(\"Chiffre d'affaires (k€)\", 500, 5000, 1500)\n",
    "            croissance = st.slider(\"Taux de croissance (%)\", 10, 100, 50)\n",
    "            marge_brute = st.slider(\"Marge brute (%)\", 10, 90, 70)\n",
    "            frais_fixes = st.slider(\"Frais fixes (k€)\", 500, 3000, 1200)\n",
    "            besoin_bfr = st.slider(\"BFR (mois de CA)\", 1, 6, 3)\n",
    "        \n",
    "        with col2:\n",
    "            # Calculs automatiques\n",
    "            marge_absolue = ca * marge_brute / 100\n",
    "            resultat_operationnel = marge_absolue - frais_fixes\n",
    "            bfr_absolu = (ca * besoin_bfr) / 12\n",
    "            ca_an_prochain = ca * (1 + croissance/100)\n",
    "            \n",
    "            st.metric(\"Résultat opérationnel\", f\"{resultat_operationnel:,.0f} k€\")\n",
    "            st.metric(\"BFR à financer\", f\"{bfr_absolu:,.0f} k€\")\n",
    "            st.metric(\"CA année N+1\", f\"{ca_an_prochain:,.0f} k€\")\n",
    "            \n",
    "            # Diagnostic\n",
    "            if resultat_operationnel < 0:\n",
    "                st.error(\"**Problème**: Pertes opérationnelles\")\n",
    "                st.write(\"**Solution possible**: Lever des fonds ou réduire les coûts fixes\")\n",
    "            else:\n",
    "                st.success(\"**Opportunité**: Rentabilité atteinte\")\n",
    "                \n",
    "            if bfr_absolu > resultat_operationnel and resultat_operationnel > 0:\n",
    "                st.warning(\"**Attention**: La croissance consomme plus de trésorerie qu'elle n'en génère\")\n",
    "            \n",
    "            # Graphique d'évolution\n",
    "            annees = range(5)\n",
    "            ca_projete = [ca * ((1 + croissance/100) ** i) for i in annees]\n",
    "            \n",
    "            fig_startup = go.Figure()\n",
    "            fig_startup.add_trace(go.Scatter(\n",
    "                x=list(annees),\n",
    "                y=ca_projete,\n",
    "                mode='lines+markers',\n",
    "                name='CA projeté',\n",
    "                line=dict(color='blue', width=3)\n",
    "            ))\n",
    "            fig_startup.update_layout(\n",
    "                title=\"Projection de croissance du CA\",\n",
    "                xaxis_title=\"Années\",\n",
    "                yaxis_title=\"Chiffre d'affaires (k€)\",\n",
    "                height=300\n",
    "            )\n",
    "            st.plotly_chart(fig_startup, use_container_width=True)\n",
    "    \n",
    "    elif cas_choice == \"🏭 PMI Industrielle\":\n",
    "        st.subheader(\"🏭 PMI Industrielle - Optimisation du BFR\")\n",
    "        \n",
    "        st.markdown(\"\"\"\n",
    "        **Contexte**: Entreprise industrielle stable mais avec des tensions de trésorerie récurrentes.\n",
    "        **Enjeu**: Améliorer la trésorerie sans impacter la croissance.\n",
    "        \"\"\")\n",
    "        \n",
    "        col1, col2, col3 = st.columns(3)\n",
    "        \n",
    "        with col1:\n",
    "            st.markdown(\"**Délais actuels**\")\n",
    "            delai_clients = st.slider(\"Délai clients (jours)\", 30, 120, 75)\n",
    "            delai_stocks = st.slider(\"Délai stocks (jours)\", 15, 90, 45)\n",
    "            delai_fournisseurs = st.slider(\"Délai fournisseurs (jours)\", 20, 90, 30)\n",
    "            ca_journalier = st.number_input(\"CA journalier (k€)\", value=10.0)\n",
    "        \n",
    "        with col2:\n",
    "            st.markdown(\"**Objectifs d'optimisation**\")\n",
    "            objectif_clients = st.slider(\"Objectif délai clients\", 30, 120, 60)\n",
    "            objectif_stocks = st.slider(\"Objectif délai stocks\", 15, 90, 35)\n",
    "            objectif_fournisseurs = st.slider(\"Objectif délai fournisseurs\", 20, 90, 40)\n",
    "        \n",
    "        with col3:\n",
    "            # Calcul des gains\n",
    "            gain_clients = (delai_clients - objectif_clients) * ca_journalier\n",
    "            gain_stocks = (delai_stocks - objectif_stocks) * ca_journalier * 0.6  # Coût des stocks\n",
    "            gain_fournisseurs = (objectif_fournisseurs - delai_fournisseurs) * ca_journalier * 0.8  # Achats\n",
    "            \n",
    "            gain_total = gain_clients + gain_stocks + gain_fournisseurs\n",
    "            \n",
    "            st.metric(\"Gain sur clients\", f\"{gain_clients:,.0f} k€\")\n",
    "            st.metric(\"Gain sur stocks\", f\"{gain_stocks:,.0f} k€\")\n",
    "            st.metric(\"Gain sur fournisseurs\", f\"{gain_fournisseurs:,.0f} k€\")\n",
    "            st.metric(\"**GAIN TOTAL TRÉSORERIE**\", f\"{gain_total:,.0f} k€\")\n",
    "            \n",
    "            if gain_total > 0:\n",
    "                st.success(\"✅ Optimisation possible\")\n",
    "            else:\n",
    "                st.warning(\"⚠️ Revoir les objectifs\")\n",
    "        \n",
    "        # Plan d'action\n",
    "        st.markdown(\"### 🎯 Plan d'Action Recommandé\")\n",
    "        \n",
    "        actions = [\n",
    "            f\"**Relance clients**: Réduire le délai de {delai_clients} à {objectif_clients} jours\",\n",
    "            f\"**Optimisation stocks**: Passer de {delai_stocks} à {objectif_stocks} jours de stock\",\n",
    "            f\"**Négociation fournisseurs**: Augmenter le délai de {delai_fournisseurs} à {objectif_fournisseurs} jours\",\n",
    "            f\"**Gain total**: {gain_total:,.0f} k€ de trésorerie dégagée\"\n",
    "        ]\n",
    "        \n",
    "        for action in actions:\n",
    "            st.write(f\"• {action}\")\n",
    "\n",
    "# Section Prévisions IA (limité pour la démo)\n",
    "elif section == \"🤖 Prévisions IA\":\n",
    "    st.header(\"🤖 Prévisions Financières par Intelligence Artificielle\")\n",
    "    \n",
    "    st.markdown(\"\"\"\n",
    "    Ce module utilise des algorithmes de machine learning pour prédire les tendances financières \n",
    "    basées sur des données historiques et des indicateurs économiques.\n",
    "    \"\"\")\n",
    "    \n",
    "    tab1, tab2 = st.tabs([\"📊 Prévision de CA\", \"🎯 Modèle Prédictif Avancé\"])\n",
    "    \n",
    "    with tab1:\n",
    "        st.subheader(\"Prévision de Chiffre d'Affaires par Régression\")\n",
    "        \n",
    "        # Génération de données historiques simulées\n",
    "        annees = list(range(2015, 2024))\n",
    "        ca_historique = [1000, 1100, 1250, 1400, 1600, 1850, 2100, 2400, 2750]\n",
    "        \n",
    "        col1, col2 = st.columns(2)\n",
    "        \n",
    "        with col1:\n",
    "            st.markdown(\"**Données Historiques**\")\n",
    "            df_historique = pd.DataFrame({\n",
    "                'Année': annees,\n",
    "                'CA (k€)': ca_historique\n",
    "            })\n",
    "            st.dataframe(df_historique, use_container_width=True)\n",
    "            \n",
    "            # Personnalisation\n",
    "            croissance_moyenne = st.slider(\"Croissance moyenne attendue (%)\", 1.0, 20.0, 12.0)\n",
    "            volatilite = st.slider(\"Volatilité des prévisions\", 1.0, 10.0, 3.0)\n",
    "        \n",
    "        with col2:\n",
    "            # Préparation des données pour le modèle\n",
    "            X = np.array(annees).reshape(-1, 1)\n",
    "            y = np.array(ca_historique)\n",
    "            \n",
    "            # Entraînement du modèle\n",
    "            model = LinearRegression()\n",
    "            model.fit(X, y)\n",
    "            \n",
    "            # Prévisions\n",
    "            annees_futures = list(range(2024, 2030))\n",
    "            X_futur = np.array(annees_futures).reshape(-1, 1)\n",
    "            predictions = model.predict(X_futur)\n",
    "            \n",
    "            # Ajout d'une composante aléatoire pour le réalisme\n",
    "            np.random.seed(42)\n",
    "            bruit = np.random.normal(0, volatilite/100 * predictions, predictions.shape)\n",
    "            predictions_ajustees = predictions * (1 + croissance_moyenne/100) + bruit\n",
    "            \n",
    "            # Graphique des prévisions\n",
    "            fig = go.Figure()\n",
    "            \n",
    "            fig.add_trace(go.Scatter(\n",
    "                x=annees, y=ca_historique,\n",
    "                mode='lines+markers',\n",
    "                name='Historique',\n",
    "                line=dict(color='blue', width=3)\n",
    "            ))\n",
    "            \n",
    "            fig.add_trace(go.Scatter(\n",
    "                x=annees_futures, y=predictions_ajustees,\n",
    "                mode='lines+markers',\n",
    "                name='Prévisions IA',\n",
    "                line=dict(color='red', width=3, dash='dash')\n",
    "            ))\n",
    "            \n",
    "            fig.update_layout(\n",
    "                title=\"Prévision de Chiffre d'Affaires par Intelligence Artificielle\",\n",
    "                xaxis_title=\"Année\",\n",
    "                yaxis_title=\"Chiffre d'Affaires (k€)\",\n",
    "                showlegend=True,\n",
    "                height=400\n",
    "            )\n",
    "            \n",
    "            st.plotly_chart(fig, use_container_width=True)\n",
    "            \n",
    "            # Affichage des prévisions détaillées\n",
    "            st.markdown(\"**Détail des Prévisions**\")\n",
    "            for annee, prediction in zip(annees_futures, predictions_ajustees):\n",
    "                st.write(f\"**{annee}**: {prediction:,.0f} k€\")\n",
    "\n",
    "# Section Données Réelles (limité pour la démo)\n",
    "elif section == \"🌍 Données Réelles\":\n",
    "    st.header(\"🌍 Analyse avec Données Réelles du Marché\")\n",
    "    \n",
    "    tab1, tab2 = st.tabs([\"📈 Actions Cotées\", \"📊 Benchmark Sectoriel\"])\n",
    "    \n",
    "    with tab1:\n",
    "        st.subheader(\"📈 Analyse d'Entreprises Cotées\")\n",
    "        \n",
    "        col1, col2 = st.columns([1, 2])\n",
    "        \n",
    "        with col1:\n",
    "            # Sélection des entreprises\n",
    "            entreprises = {\n",
    "                \"Apple\": \"AAPL\",\n",
    "                \"Microsoft\": \"MSFT\", \n",
    "                \"Amazon\": \"AMZN\",\n",
    "                \"Google\": \"GOOGL\",\n",
    "                \"Tesla\": \"TSLA\",\n",
    "                \"LVMH\": \"MC.PA\",\n",
    "                \"L'Oréal\": \"OR.PA\",\n",
    "                \"Airbus\": \"AIR.PA\"\n",
    "            }\n",
    "            \n",
    "            entreprise_choisie = st.selectbox(\"Choisissez une entreprise:\", list(entreprises.keys()))\n",
    "            ticker = entreprises[entreprise_choisie]\n",
    "            periode = st.selectbox(\"Période d'analyse:\", [\"1mo\", \"3mo\", \"6mo\", \"1y\", \"2y\", \"5y\"])\n",
    "            \n",
    "            if st.button(\"🔄 Charger les données\"):\n",
    "                with st.spinner(\"Chargement des données financières...\"):\n",
    "                    try:\n",
    "                        # Récupération des données\n",
    "                        stock = yf.Ticker(ticker)\n",
    "                        historique = stock.history(period=periode)\n",
    "                        info = stock.info\n",
    "                        \n",
    "                        # Sauvegarde dans la session\n",
    "                        st.session_state.stock_data = {\n",
    "                            'historique': historique,\n",
    "                            'info': info,\n",
    "                            'ticker': ticker\n",
    "                        }\n",
    "                        st.success(\"Données chargées avec succès !\")\n",
    "                        \n",
    "                    except Exception as e:\n",
    "                        st.error(f\"Erreur lors du chargement: {e}\")\n",
    "        \n",
    "        with col2:\n",
    "            if 'stock_data' in st.session_state:\n",
    "                data = st.session_state.stock_data\n",
    "                historique = data['historique']\n",
    "                info = data['info']\n",
    "                \n",
    "                # Affichage des indicateurs clés\n",
    "                st.subheader(f\"Indicateurs Clés - {ticker}\")\n",
    "                \n",
    "                col_met1, col_met2, col_met3, col_met4 = st.columns(4)\n",
    "                \n",
    "                with col_met1:\n",
    "                    prix_actuel = historique['Close'][-1]\n",
    "                    variation = ((prix_actuel - historique['Close'][0]) / historique['Close'][0]) * 100\n",
    "                    st.metric(\"Prix Actuel\", f\"{prix_actuel:.2f} $\", f\"{variation:+.2f}%\")\n",
    "                \n",
    "                with col_met2:\n",
    "                    per = info.get('trailingPE', 'N/A')\n",
    "                    st.metric(\"P/E Ratio\", f\"{per if per != 'N/A' else 'N/A'}\")\n",
    "                \n",
    "                with col_met3:\n",
    "                    market_cap = info.get('marketCap', 0)\n",
    "                    st.metric(\"Market Cap\", f\"{market_cap/1e9:.1f} B$\")\n",
    "                \n",
    "                with col_met4:\n",
    "                    dividend_yield = info.get('dividendYield', 0) * 100 if info.get('dividendYield') else 0\n",
    "                    st.metric(\"Dividend Yield\", f\"{dividend_yield:.2f}%\")\n",
    "                \n",
    "                # Graphique des prix\n",
    "                fig = go.Figure()\n",
    "                fig.add_trace(go.Candlestick(\n",
    "                    x=historique.index,\n",
    "                    open=historique['Open'],\n",
    "                    high=historique['High'],\n",
    "                    low=historique['Low'],\n",
    "                    close=historique['Close'],\n",
    "                    name='Prix'\n",
    "                ))\n",
    "                \n",
    "                fig.update_layout(\n",
    "                    title=f\"Évolution du cours de {ticker}\",\n",
    "                    xaxis_title=\"Date\",\n",
    "                    yaxis_title=\"Prix ($)\",\n",
    "                    height=400\n",
    "                )\n",
    "                \n",
    "                st.plotly_chart(fig, use_container_width=True)\n",
    "\n",
    "# Section Mes Analyses\n",
    "elif section == \"💾 Mes Analyses\":\n",
    "    st.header(\"💾 Gestion de Mes Analyses\")\n",
    "    \n",
    "    tab1, tab2, tab3 = st.tabs([\"📁 Sauvegardes\", \"👥 Collaboration\", \"📤 Export\"])\n",
    "    \n",
    "    with tab1:\n",
    "        st.subheader(\"Sauvegarde des Analyses\")\n",
    "        \n",
    "        # Formulaire de sauvegarde\n",
    "        with st.form(\"sauvegarde_form\"):\n",
    "            nom_analyse = st.text_input(\"Nom de l'analyse\", \"Analyse Société X\")\n",
    "            description = st.text_area(\"Description\", \"Analyse complète des ratios et de la performance...\")\n",
    "            tags = st.text_input(\"Tags (séparés par des virgules)\", \"ratios, performance, valuation\")\n",
    "            \n",
    "            if st.form_submit_button(\"💾 Sauvegarder l'analyse actuelle\"):\n",
    "                nouvelle_analyse = {\n",
    "                    'id': len(st.session_state.analyses_sauvegardees) + 1,\n",
    "                    'nom': nom_analyse,\n",
    "                    'description': description,\n",
    "                    'tags': tags,\n",
    "                    'date': datetime.now().strftime(\"%d/%m/%Y %H:%M\"),\n",
    "                    'data': {\n",
    "                        'ratios': {},\n",
    "                        'equilibre': {}\n",
    "                    }\n",
    "                }\n",
    "                st.session_state.analyses_sauvegardees.append(nouvelle_analyse)\n",
    "                st.success(\"✅ Analyse sauvegardée avec succès !\")\n",
    "        \n",
    "        # Liste des analyses sauvegardées\n",
    "        st.subheader(\"Mes Analyses Sauvegardées\")\n",
    "        \n",
    "        if st.session_state.analyses_sauvegardees:\n",
    "            for analyse in st.session_state.analyses_sauvegardees:\n",
    "                with st.expander(f\"📊 {analyse['nom']} - {analyse['date']}\"):\n",
    "                    st.write(f\"**Description**: {analyse['description']}\")\n",
    "                    st.write(f\"**Tags**: {analyse['tags']}\")\n",
    "                    \n",
    "                    col_act1, col_act2 = st.columns(2)\n",
    "                    with col_act1:\n",
    "                        if st.button(f\"📖 Charger\", key=f\"load_{analyse['id']}\"):\n",
    "                            st.session_state.current_analysis = analyse\n",
    "                            st.success(\"Analyse chargée !\")\n",
    "                    with col_act2:\n",
    "                        if st.button(f\"🗑️ Supprimer\", key=f\"del_{analyse['id']}\"):\n",
    "                            st.session_state.analyses_sauvegardees = [\n",
    "                                a for a in st.session_state.analyses_sauvegardees \n",
    "                                if a['id'] != analyse['id']\n",
    "                            ]\n",
    "                            st.rerun()\n",
    "        else:\n",
    "            st.info(\"ℹ️ Aucune analyse sauvegardée pour le moment\")\n",
    "\n",
    "# Section Mon Dashboard\n",
    "elif section == \"📊 Mon Dashboard\":\n",
    "    st.header(\"📊 Mon Dashboard Personnel\")\n",
    "    \n",
    "    # Calcul de la progression globale\n",
    "    modules_completes = sum(st.session_state.progression.values())\n",
    "    progression_totale = (modules_completes / len(st.session_state.progression)) * 100\n",
    "    \n",
    "    # Métriques principales\n",
    "    col1, col2, col3, col4 = st.columns(4)\n",
    "    \n",
    "    with col1:\n",
    "        st.metric(\"📚 Modules Complétés\", f\"{modules_completes}/6\")\n",
    "    with col2:\n",
    "        st.metric(\"🎯 Progression Globale\", f\"{progression_totale:.0f}%\")\n",
    "    with col3:\n",
    "        analyses_count = len(st.session_state.get('analyses_sauvegardees', []))\n",
    "        st.metric(\"💾 Analyses Sauvegardées\", analyses_count)\n",
    "    with col4:\n",
    "        quiz_score = st.session_state.get('quiz_score', 0)\n",
    "        st.metric(\"🏆 Score Quiz\", f\"{quiz_score:.0f}%\")\n",
    "    \n",
    "    # Graphique de progression\n",
    "    st.subheader(\"📈 Ma Progression d'Apprentissage\")\n",
    "    \n",
    "    modules = ['Fondamentaux', 'Ratios', 'Équilibre', 'Évaluation', 'Cas Pratiques', 'Quiz']\n",
    "    progression_par_module = [\n",
    "        st.session_state.progression.get('fondamentaux', False) * 100,\n",
    "        st.session_state.progression.get('ratios', False) * 100,\n",
    "        st.session_state.progression.get('equilibre', False) * 100,\n",
    "        st.session_state.progression.get('evaluation', False) * 100,\n",
    "        st.session_state.progression.get('cas_pratiques', False) * 100,\n",
    "        st.session_state.progression.get('quiz', False) * 100\n",
    "    ]\n",
    "    \n",
    "    fig_progression = go.Figure()\n",
    "    fig_progression.add_trace(go.Bar(\n",
    "        x=modules,\n",
    "        y=progression_par_module,\n",
    "        marker_color=['green' if p == 100 else 'orange' for p in progression_par_module]\n",
    "    ))\n",
    "    \n",
    "    fig_progression.update_layout(\n",
    "        title=\"Progression par Module\",\n",
    "        yaxis=dict(range=[0, 100]),\n",
    "        height=300\n",
    "    )\n",
    "    \n",
    "    st.plotly_chart(fig_progression, use_container_width=True)\n",
    "    \n",
    "    # Recommandations personnalisées\n",
    "    st.subheader(\"🎯 Recommandations Personnalisées\")\n",
    "    \n",
    "    col_rec1, col_rec2 = st.columns(2)\n",
    "    \n",
    "    with col_rec1:\n",
    "        if not st.session_state.progression.get('fondamentaux', False):\n",
    "            st.error(\"**📋 Priorité**: Commencez par les fondamentaux de l'analyse financière\")\n",
    "        elif not st.session_state.progression.get('ratios', False):\n",
    "            st.warning(\"**⚡ Prochaine étape**: Maîtrisez l'analyse par les ratios\")\n",
    "        else:\n",
    "            st.success(\"**🚀 Excellent**: Vous maîtrisez les bases ! Passez aux cas pratiques\")\n",
    "    \n",
    "    with col_rec2:\n",
    "        if analyses_count == 0:\n",
    "            st.info(\"**💡 Astuce**: Sauvegardez vos premières analyses pour les retrouver plus tard\")\n",
    "        else:\n",
    "            st.success(f\"**📊 Actif**: Vous avez {analyses_count} analyses sauvegardées\")\n",
    "\n",
    "# Section Aide & Support\n",
    "elif section == \"❓ Aide & Support\":\n",
    "    st.header(\"❓ Centre d'Aide et Support\")\n",
    "    \n",
    "    tab1, tab2, tab3, tab4 = st.tabs([\"📖 Guide Utilisateur\", \"🎥 Tutoriels Vidéo\", \"❓ FAQ\", \"📞 Support\"])\n",
    "    \n",
    "    with tab1:\n",
    "        st.subheader(\"📖 Guide d'Utilisation Complet\")\n",
    "        \n",
    "        with st.expander(\"🎯 Premiers Pas\"):\n",
    "            st.markdown(\"\"\"\n",
    "            **Bienvenue dans FinanceLab !**\n",
    "            \n",
    "            1. **Commencez** par le module \"Fondamentaux\" pour apprendre les bases\n",
    "            2. **Pratiquez** avec les calculateurs interactifs\n",
    "            3. **Testez** vos connaissances avec les quiz\n",
    "            4. **Appliquez** vos compétences avec les cas pratiques\n",
    "            \"\"\")\n",
    "        \n",
    "        with st.expander(\"📊 Comprendre les Ratios\"):\n",
    "            st.markdown(\"\"\"\n",
    "            **Les ratios clés à maîtriser:**\n",
    "            \n",
    "            - **ROE** (Return on Equity): Rentabilité des capitaux propres\n",
    "            - **ROA** (Return on Assets): Efficacité de l'utilisation des actifs  \n",
    "            - **Ratio d'endettement**: Niveau d'endettement de l'entreprise\n",
    "            - **BFR** (Besoin en Fonds de Roulement): Besoin de financement du cycle d'exploitation\n",
    "            \"\"\")\n",
    "    \n",
    "    with tab2:\n",
    "        st.subheader(\"🎥 Tutoriels Vidéo\")\n",
    "        \n",
    "        # Liens vers des tutoriels (simulés)\n",
    "        tutoriels = [\n",
    "            {\"titre\": \"Maîtriser le BFR en 10 minutes\", \"duree\": \"10:15\", \"niveau\": \"Débutant\"},\n",
    "            {\"titre\": \"Analyse DCF complète\", \"duree\": \"25:30\", \"niveau\": \"Avancé\"},\n",
    "            {\"titre\": \"Ratios de rentabilité expliqués\", \"duree\": \"15:45\", \"niveau\": \"Intermédiaire\"},\n",
    "            {\"titre\": \"Cas pratique PMI\", \"duree\": \"32:10\", \"niveau\": \"Expert\"}\n",
    "        ]\n",
    "        \n",
    "        for tuto in tutoriels:\n",
    "            with st.expander(f\"🎬 {tuto['titre']} ({tuto['duree']}) - {tuto['niveau']}\"):\n",
    "                st.write(\"**Description**: \" + \"Contenu du tutoriel détaillé...\")\n",
    "                st.info(\"🎥 Fonctionnalité vidéo à implémenter\")\n",
    "    \n",
    "    with tab3:\n",
    "        st.subheader(\"❓ Foire Aux Questions\")\n",
    "        \n",
    "        faqs = [\n",
    "            {\n",
    "                \"question\": \"Comment sauvegarder mes analyses ?\",\n",
    "                \"reponse\": \"Utilisez le module 'Mes Analyses' et cliquez sur le bouton 'Sauvegarder' après chaque analyse.\"\n",
    "            },\n",
    "            {\n",
    "                \"question\": \"Puis-je utiliser l'application sur mobile ?\",\n",
    "                \"reponse\": \"Oui ! FinanceLab est responsive et s'adapte à tous les appareils.\"\n",
    "            },\n",
    "            {\n",
    "                \"question\": \"Les données sont-elles sécurisées ?\",\n",
    "                \"reponse\": \"Toutes vos données sont stockées localement dans votre navigateur. Nous ne collectons aucune donnée personnelle.\"\n",
    "            }\n",
    "        ]\n",
    "        \n",
    "        for faq in faqs:\n",
    "            with st.expander(f\"❔ {faq['question']}\"):\n",
    "                st.write(faq['reponse'])\n",
    "    \n",
    "    with tab4:\n",
    "        st.subheader(\"📞 Support Technique\")\n",
    "        \n",
    "        st.markdown(\"\"\"\n",
    "        **Besoin d'aide ? Contactez-nous :**\n",
    "        \n",
    "        📧 Email : support@financelab.com\n",
    "        💬 Chat : Disponible 9h-18h\n",
    "        📞 Téléphone : +33 1 23 45 67 89\n",
    "        \n",
    "        **Heures d'ouverture :**\n",
    "        Lundi - Vendredi : 9h00 - 18h00\n",
    "        Samedi : 10h00 - 16h00\n",
    "        \"\"\")\n",
    "        \n",
    "        # Formulaire de contact\n",
    "        with st.form(\"contact_form\"):\n",
    "            st.write(\"**Envoyez-nous un message**\")\n",
    "            nom = st.text_input(\"Votre nom\")\n",
    "            email = st.text_input(\"Votre email\")\n",
    "            message = st.text_area(\"Votre message\")\n",
    "            \n",
    "            if st.form_submit_button(\"📤 Envoyer le message\"):\n",
    "                st.success(\"Message envoyé ! Nous vous répondrons dans les 24h.\")\n",
    "\n",
    "# Footer\n",
    "st.markdown(\"---\")\n",
    "st.markdown(\n",
    "    \"<div style='text-align: center; color: gray;'>\"\n",
    "    \"FinanceLab - Plateforme d'apprentissage de l'analyse financière • \"\n",
    "    \"Développé avec ❤️ et Streamlit\"\n",
    "    \"</div>\",\n",
    "    unsafe_allow_html=True\n",
    ")\n",
    "```\n",
    "\n",
    "## 📋 **Fichier requirements.txt**\n",
    "\n",
    "```txt\n",
    "streamlit>=1.28.0\n",
    "pandas>=2.0.0\n",
    "numpy>=1.24.0\n",
    "plotly>=5.15.0\n",
    "yfinance>=0.2.18\n",
    "scikit-learn>=1.3.0\n",
    "requests>=2.31.0\n",
    "```\n",
    "\n",
    "## 🚀 **Instructions de Lancement**\n",
    "\n",
    "1. **Enregistrez** le code dans un fichier `app.py`\n",
    "2. **Créez** le fichier `requirements.txt` avec les dépendances\n",
    "3. **Installez** les dépendances :\n",
    "   ```bash\n",
    "   pip install -r requirements.txt\n",
    "   ```\n",
    "4. **Lancez** l'application :\n",
    "   ```bash\n",
    "   streamlit run app.py\n",
    "   ```\n",
    "\n",
    "## 🎯 **Fonctionnalités Complètes Incluses**\n",
    "\n",
    "### ✅ **Modules d'Apprentissage**\n",
    "- 📋 Fondamentaux financiers\n",
    "- 💰 Performance et rentabilité  \n",
    "- ⚖️ Équilibre financier\n",
    "- 📊 Analyse par ratios\n",
    "- 🎯 Évaluation d'entreprise\n",
    "- 🏢 Cas pratiques sectoriels\n",
    "- 🤖 Prévisions IA\n",
    "- 🌍 Données réelles\n",
    "\n",
    "### ✅ **Fonctionnalités Interactives**\n",
    "- Calculateurs dynamiques\n",
    "- Graphiques interactifs (Plotly)\n",
    "- Simulations en temps réel\n",
    "- Système de progression\n",
    "- Sauvegarde des analyses\n",
    "- Dashboard personnel\n",
    "\n",
    "### ✅ **Données et IA**\n",
    "- Intégration données boursières\n",
    "- Prévisions par machine learning\n",
    "- Benchmarking sectoriel\n",
    "- Analyse de sensibilité\n",
    "\n",
    "### ✅ **Interface Utilisateur**\n",
    "- Design responsive\n",
    "- Navigation intuitive\n",
    "- Feedback visuel\n",
    "- Notifications contextuelles\n",
    "\n",
    "**L'application est maintenant complète et prête à l'emploi !** 🎉"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
